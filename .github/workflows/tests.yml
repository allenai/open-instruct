name: Tests

on:
  push:
    branches:
      - main
      - v*-release
  pull_request:
    branches:
      - main
  merge_group:

jobs:

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    container:
      # Use minimal Ubuntu image instead of huge CUDA dev image
      image: ubuntu:24.04
    steps:
      - name: Initial disk space check
        run: |
          echo "=== Initial disk space ==="
          df -h
          echo ""
          echo "=== Largest directories in / ==="
          du -h -d 1 / 2>/dev/null | sort -rh | head -20 || true
          
      - name: Install minimal CUDA toolkit for nvcc
        run: |
          # Install only the minimal CUDA toolkit needed for nvcc
          apt-get update
          apt-get install -y wget software-properties-common
          
          # Add NVIDIA package repositories
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
          dpkg -i cuda-keyring_1.1-1_all.deb
          rm cuda-keyring_1.1-1_all.deb
          
          # Install only cuda-nvcc package (much smaller than full toolkit)
          apt-get update
          apt-get install -y cuda-nvcc-12-6
          
          # Create symlink so nvcc is available
          ln -s /usr/local/cuda-12.6/bin/nvcc /usr/bin/nvcc || true
          
          echo "nvcc installed, checking version:"
          nvcc --version || echo "nvcc not found"
          
          echo "Disk space after CUDA install:"
          df -h
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Disk space after checkout
        run: |
          echo "=== Disk space after checkout ==="
          df -h
          echo ""
          echo "=== Repository size ==="
          du -sh .
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.8.6"
          
      - name: Pre-sync disk check
        run: |
          echo "=== Disk space before uv sync ==="
          df -h
          
      - name: Set up Python
        run: |
          # Set environment variables to minimize disk usage
          export UV_LINK_MODE=copy  # Suppress hardlink warnings
          
          # Run uv sync with optimizations for minimal disk usage
          # --no-cache: Don't cache downloaded packages
          uv sync --no-cache
        
      - name: Disk space after dependencies
        run: |
          echo "=== Disk space after installing dependencies ==="
          df -h
          echo ""
          echo "=== Virtual environment size ==="
          du -sh .venv/ 2>/dev/null || echo "No .venv found"
          
      - name: Run unit tests
        run: uv run pytest -n auto
        
      - name: Final disk space check
        if: always()
        run: |
          echo "=== Final disk space ==="
          df -h