name: Beaker Experiment Launch

# Run experiments on Beaker using the latest Docker image
on:
  # Run on schedule - every 24 hours at midnight PT (Pacific Time)
  # PT is UTC-8 (PST) or UTC-7 (PDT), so midnight PT is 8am UTC (or 7am during DST)
  schedule:
    - cron: '0 8 * * *'
  
  push:
    # Run this workflow anytime a push updates one of the files in the image's directory
    # (other than the README), and anytime there's a new release tag for this image.
    paths:
      - 'open_instruct/**'
      - '!open_instruct/README.md'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/push-image.yml'
      # Note, add .olmo dockerfile + requirements if adding auto build to those
    branches: [main]
  pull_request: # note, comment this out for running on every push
    # Also run on PRs that update the files in the image's directory (other than README).
    branches: [main]
    paths:
      - 'open_instruct/**'
      - '!open_instruct/README.md'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/beaker-experiment.yml'
  workflow_dispatch:  # This allows us to manually trigger a build through the GitHub UI.
    inputs:
      docker_image_override:
        description: 'Optional: Override the Docker image (leave empty to use latest)'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  launch-experiment:
    name: Launch Beaker Experiment
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to get commit author info
      
      - name: Get trigger information
        id: get-trigger-info
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get the commit author for push events
            AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
            echo "trigger_info=Push by ${AUTHOR_NAME}" >> $GITHUB_OUTPUT
            echo "notification_type=push" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Get the user who triggered the manual dispatch
            echo "trigger_info=Manual dispatch by ${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "notification_type=manual" >> $GITHUB_OUTPUT
          else
            # For scheduled runs
            echo "trigger_info=Scheduled run" >> $GITHUB_OUTPUT
            echo "notification_type=schedule" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Setup Beaker
        uses: allenai/setup-beaker@v2
        with:
          token: ${{ secrets.BEAKER_TOKEN }}
          workspace: ai2/tulu-thinker
      
      - name: Get latest Docker image
        id: get-image
        run: |
          # Get the short SHA and run ID for the current commit
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # If docker_image_override is provided, use it
          if [ -n "${{ github.event.inputs.docker_image_override }}" ]; then
            echo "Using override image: ${{ github.event.inputs.docker_image_override }}"
            echo "docker_image=${{ github.event.inputs.docker_image_override }}" >> $GITHUB_OUTPUT
          else
            # Get the most recent successful push-image workflow run for this commit
            echo "Fetching latest Docker image for commit ${SHORT_SHA}..."
            
            # First, try to get the image from the current workflow run if this was triggered by push
            if [ "${{ github.event_name }}" = "push" ]; then
              # Wait a bit for the push-image workflow to complete
              echo "Waiting for push-image workflow to complete..."
              sleep 60
            fi
            
            # Use the standard naming convention from push-image workflow
            DOCKER_IMAGE="open_instruct_auto"
            echo "docker_image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
            echo "Using Docker image: ${DOCKER_IMAGE}"
          fi
      
      - name: Install dependencies
        run: |
          # Install development dependencies needed for mason.py
          uv sync --only-group dev
      
      - name: Launch Beaker experiment
        id: launch
        env:
          BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -euo pipefail
          
          # Set the Docker image in the command
          DOCKER_IMAGE="${{ steps.get-image.outputs.docker_image }}"
          
          echo "Launching experiment with Docker image: ${DOCKER_IMAGE}"
          echo "Git commit: $(git rev-parse --short HEAD)"
          
          # Launch the experiment directly using mason.py
          echo "Running mason.py with Docker image: ${DOCKER_IMAGE}"
          
          OUTPUT=$(uv run python mason.py \
            --cluster ai2/jupiter-cirrascale-2 \
            --cluster ai2/augusta-google-1 \
            --cluster ai2/saturn-cirrascale \
            --cluster ai2/ceres-cirrascale \
            --image "${DOCKER_IMAGE}" \
            --pure_docker_mode \
            --workspace ai2/tulu-thinker \
            --priority high \
            --preemptible \
            --num_nodes 1 \
            --max_retries 0 \
            --env VLLM_ALLOW_LONG_MAX_MODEL_LEN=1 \
            --env GIT_COMMIT="$(git rev-parse --short HEAD)" \
            --env GITHUB_RUN_ID="${GITHUB_RUN_ID}" \
            --env GITHUB_RUN_URL="${GITHUB_RUN_URL}" \
            --budget ai2/oe-adapt \
            --no-host-networking \
            --gpus 1 \
            -- source configs/beaker_configs/ray_node_setup.sh \&\& python open_instruct/grpo_fast.py \
            --dataset_mixer_list ai2-adapt-dev/rlvr_gsm8k_zs 64 \
            --dataset_mixer_list_splits train \
            --dataset_mixer_eval_list ai2-adapt-dev/rlvr_gsm8k_zs 16 \
            --dataset_mixer_eval_list_splits train \
            --max_token_length 512 \
            --max_prompt_token_length 512 \
            --response_length 512 \
            --pack_length 1024 \
            --per_device_train_batch_size 1 \
            --num_unique_prompts_rollout 8 \
            --num_samples_per_prompt_rollout 4 \
            --model_name_or_path Qwen/Qwen3-1.7B \
            --stop_strings "</answer>" \
            --apply_r1_style_format_reward \
            --apply_verifiable_reward true \
            --temperature 0.7 \
            --ground_truths_key ground_truth \
            --chat_template_name r1_simple_chat_postpend_think \
            --learning_rate 3e-7 \
            --total_episodes 200 \
            --deepspeed_stage 2 \
            --num_epochs 1 \
            --num_learners_per_node 1 \
            --vllm_tensor_parallel_size 1 \
            --beta 0.01 \
            --seed 3 \
            --num_evals 20 \
            --vllm_sync_backend gloo \
            --vllm_gpu_memory_utilization 0.3 \
            --save_traces \
            --vllm_enforce_eager \
            --gradient_checkpointing \
            --push_to_hub false \
            --single_gpu_mode 2>&1) || {
            EXIT_CODE=$?
            echo "ERROR: mason.py failed with exit code $EXIT_CODE"
            echo "Full output:"
            echo "$OUTPUT"
            exit $EXIT_CODE
          }
          echo "$OUTPUT"
          
          # Extract experiment ID from output
          EXPERIMENT_ID=$(echo "$OUTPUT" | grep -oP 'https://beaker.org/ex/\K[a-zA-Z0-9]+' | tail -1)
          if [ -z "$EXPERIMENT_ID" ]; then
            echo "Failed to extract experiment ID from output"
            echo "DEBUG: Full output was:"
            echo "$OUTPUT"
            exit 1
          fi
          
          echo "experiment_id=$EXPERIMENT_ID" >> $GITHUB_OUTPUT
          echo "Experiment ID: $EXPERIMENT_ID"
          echo "Experiment URL: https://beaker.org/ex/$EXPERIMENT_ID"
      
      - name: Wait for Beaker experiment completion
        env:
          BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}
        run: |
          EXPERIMENT_ID="${{ steps.launch.outputs.experiment_id }}"
          echo "Waiting for experiment $EXPERIMENT_ID to complete..."
          
          # Maximum wait time: 20 minutes (1200 seconds)
          MAX_WAIT_TIME=1200
          CHECK_INTERVAL=30
          ELAPSED_TIME=0
          
          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            # Get experiment status
            STATUS=$(beaker experiment get $EXPERIMENT_ID --format json | jq -r '.status')
            
            echo "Current status: $STATUS (elapsed: ${ELAPSED_TIME}s)"
            
            # Check if experiment has completed
            if [ "$STATUS" = "succeeded" ]; then
              echo "✅ Experiment completed successfully!"
              exit 0
            elif [ "$STATUS" = "failed" ] || [ "$STATUS" = "canceled" ]; then
              echo "❌ Experiment $STATUS"
              exit 1
            fi
            
            # Wait before next check
            sleep $CHECK_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL))
          done
          
          echo "⏱️ Timeout: Experiment did not complete within 20 minutes"
          exit 1
      
      - name: Summary
        if: always()
        run: |
          echo "## Beaker Experiment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ steps.get-trigger-info.outputs.trigger_info }}" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Image:** ${{ steps.get-image.outputs.docker_image }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.launch.outputs.experiment_id }}" ]; then
            echo "**Beaker Experiment:** [View on Beaker](https://beaker.org/ex/${{ steps.launch.outputs.experiment_id }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **Status:** Experiment completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Experiment failed or timed out" >> $GITHUB_STEP_SUMMARY
          fi