name: Tests

on:
  push:
    branches:
      - main
      - v*-release
  pull_request:
    branches:
      - main
  merge_group:

jobs:

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:13.0.0-cudnn-devel-ubuntu24.04
    steps:
      - name: Initial disk space check
        run: |
          echo "=== Initial disk space ==="
          df -h
          echo ""
          echo "=== Largest directories in / ==="
          du -h -d 1 / 2>/dev/null | sort -rh | head -20 || true
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Disk space after checkout
        run: |
          echo "=== Disk space after checkout ==="
          df -h
          echo ""
          echo "=== Repository size ==="
          du -sh .
          echo ""
          echo "=== Largest files/dirs in repo ==="
          du -h -d 1 . | sort -rh | head -20
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.8.6"
          
      - name: Delete huge unnecessary tools folder
        run: |
          echo "Disk space before cleanup:"
          df -h /
          
          # Remove unnecessary directories (no sudo needed in container)
          for dir in /opt/hostedtoolcache /usr/share/dotnet "$AGENT_TOOLSDIRECTORY" /usr/local/lib/android /usr/local/share/boost; do
            if [ -d "$dir" ]; then
              rm -rf "$dir" && echo "Removed: $dir"
            fi
          done
          
          # Remove unnecessary packages (if apt is available)
          if command -v apt-get >/dev/null 2>&1; then
            apt-get remove -y \
              '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' \
              '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable \
              firefox powershell mono-devel 2>/dev/null || true
            
            apt-get autoremove -y 2>/dev/null || true
            apt-get clean 2>/dev/null || true
          fi
          
          # Clean up Docker (if docker is available)
          if command -v docker >/dev/null 2>&1; then
            docker system prune -af --volumes 2>/dev/null || true
          fi
          
          echo "Disk space after cleanup:"
          df -h /
          
      - name: Pre-sync disk check
        run: |
          echo "=== Disk space before uv sync ==="
          df -h
          echo ""
          echo "=== Check what's using space in key directories ==="
          du -sh /usr 2>/dev/null || true
          du -sh /opt 2>/dev/null || true
          du -sh /__t 2>/dev/null || true
          du -sh /__e 2>/dev/null || true
          echo ""
          echo "=== UV cache location check ==="
          echo "UV_CACHE_DIR: ${UV_CACHE_DIR:-not set}"
          echo "HOME: $HOME"
          du -sh ~/.cache 2>/dev/null || echo "No ~/.cache yet"
          
      - name: Set up Python (with monitoring)
        run: |
          # Monitor disk usage during uv sync
          (while true; do 
            echo "=== Live disk check during uv sync ==="
            df -h | grep -E "overlay|/dev/root" | head -2
            echo "Workspace: $(du -sh . 2>/dev/null | cut -f1)"
            echo "UV cache: $(du -sh ~/.cache/uv 2>/dev/null | cut -f1 || echo '0')"
            echo "---"
            sleep 10
          done) &
          MONITOR_PID=$!
          
          # Run uv sync with verbose output to see what it's downloading
          uv sync -v || EXIT_CODE=$?
          
          # Stop monitoring
          kill $MONITOR_PID 2>/dev/null || true
          
          # Exit with the original exit code if failed
          exit ${EXIT_CODE:-0}
        
      - name: Disk space after dependencies
        run: |
          echo "=== Disk space after installing dependencies ==="
          df -h
          echo ""
          echo "=== UV cache location and size ==="
          echo "UV cache dir: $(uv cache dir)"
          du -sh $(uv cache dir) 2>/dev/null || echo "No UV cache found"
          echo ""
          echo "=== Breakdown of UV cache ==="
          du -h -d 1 $(uv cache dir) 2>/dev/null | sort -rh | head -10 || true
          echo ""
          echo "=== Virtual environment size ==="
          du -sh .venv/ 2>/dev/null || echo "No .venv found"
          echo ""
          echo "=== Largest packages in site-packages ==="
          find .venv -name "site-packages" -type d -exec du -h -d 1 {} \; 2>/dev/null | sort -rh | head -20 || true
          echo ""
          echo "=== Workspace largest directories ==="
          du -h -d 1 . | sort -rh | head -20
          echo ""
          echo "=== Check root filesystem largest dirs again ==="
          du -h -d 1 / 2>/dev/null | sort -rh | head -20 || true
          
      - name: Run unit tests
        run: uv run pytest -n auto
        
      - name: Final disk space check
        if: always()
        run: |
          echo "=== Final disk space ==="
          df -h
          echo ""
          echo "=== Temp directory size ==="
          du -sh /tmp 2>/dev/null || echo "Cannot access /tmp"
          echo ""
          echo "=== Final workspace size ==="
          du -sh .